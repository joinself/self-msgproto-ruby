// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUTH_SELFMESSAGING_H_
#define FLATBUFFERS_GENERATED_AUTH_SELFMESSAGING_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace SelfMessaging {

struct Auth;
struct AuthBuilder;

struct Auth FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AuthBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MSGTYPE = 6,
    VT_TOKEN = 8,
    VT_DEVICE = 10,
    VT_OFFSET = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  SelfMessaging::MsgType msgtype() const {
    return static_cast<SelfMessaging::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  const flatbuffers::String *device() const {
    return GetPointer<const flatbuffers::String *>(VT_DEVICE);
  }
  int64_t offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           VerifyOffset(verifier, VT_DEVICE) &&
           verifier.VerifyString(device()) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           verifier.EndTable();
  }
};

struct AuthBuilder {
  typedef Auth Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Auth::VT_ID, id);
  }
  void add_msgtype(SelfMessaging::MsgType msgtype) {
    fbb_.AddElement<int8_t>(Auth::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(Auth::VT_TOKEN, token);
  }
  void add_device(flatbuffers::Offset<flatbuffers::String> device) {
    fbb_.AddOffset(Auth::VT_DEVICE, device);
  }
  void add_offset(int64_t offset) {
    fbb_.AddElement<int64_t>(Auth::VT_OFFSET, offset, 0);
  }
  explicit AuthBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Auth> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Auth>(end);
    return o;
  }
};

inline flatbuffers::Offset<Auth> CreateAuth(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    flatbuffers::Offset<flatbuffers::String> token = 0,
    flatbuffers::Offset<flatbuffers::String> device = 0,
    int64_t offset = 0) {
  AuthBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_device(device);
  builder_.add_token(token);
  builder_.add_id(id);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<Auth> CreateAuthDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    const char *token = nullptr,
    const char *device = nullptr,
    int64_t offset = 0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto token__ = token ? _fbb.CreateString(token) : 0;
  auto device__ = device ? _fbb.CreateString(device) : 0;
  return SelfMessaging::CreateAuth(
      _fbb,
      id__,
      msgtype,
      token__,
      device__,
      offset);
}

}  // namespace SelfMessaging

#endif  // FLATBUFFERS_GENERATED_AUTH_SELFMESSAGING_H_

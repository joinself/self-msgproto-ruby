// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_
#define FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace SelfMessaging {

struct Metadata;

struct Message;
struct MessageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Metadata FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t timestamp_;
  int64_t offset_;

 public:
  Metadata()
      : timestamp_(0),
        offset_(0) {
  }
  Metadata(int64_t _timestamp, int64_t _offset)
      : timestamp_(flatbuffers::EndianScalar(_timestamp)),
        offset_(flatbuffers::EndianScalar(_offset)) {
  }
  int64_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
  int64_t offset() const {
    return flatbuffers::EndianScalar(offset_);
  }
};
FLATBUFFERS_STRUCT_END(Metadata, 16);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MSGTYPE = 6,
    VT_SUBTYPE = 8,
    VT_SENDER = 10,
    VT_RECIPIENT = 12,
    VT_METADATA = 14,
    VT_CIPHERTEXT = 16,
    VT_PRIORITY = 20,
    VT_MESSAGE_TYPE = 22,
    VT_COLLAPSE_KEY = 24,
    VT_NOTIFICATION_PAYLOAD = 26,
    VT_AUTHORIZATION = 28
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  SelfMessaging::MsgType msgtype() const {
    return static_cast<SelfMessaging::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  SelfMessaging::MsgSubType subtype() const {
    return static_cast<SelfMessaging::MsgSubType>(GetField<uint16_t>(VT_SUBTYPE, 0));
  }
  const flatbuffers::String *sender() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER);
  }
  const flatbuffers::String *recipient() const {
    return GetPointer<const flatbuffers::String *>(VT_RECIPIENT);
  }
  const SelfMessaging::Metadata *metadata() const {
    return GetStruct<const SelfMessaging::Metadata *>(VT_METADATA);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  uint32_t priority() const {
    return GetField<uint32_t>(VT_PRIORITY, 0);
  }
  const flatbuffers::Vector<uint8_t> *message_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE_TYPE);
  }
  const flatbuffers::Vector<uint8_t> *collapse_key() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COLLAPSE_KEY);
  }
  const flatbuffers::Vector<uint8_t> *notification_payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NOTIFICATION_PAYLOAD);
  }
  const flatbuffers::Vector<uint8_t> *authorization() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_AUTHORIZATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE) &&
           VerifyField<uint16_t>(verifier, VT_SUBTYPE) &&
           VerifyOffset(verifier, VT_SENDER) &&
           verifier.VerifyString(sender()) &&
           VerifyOffset(verifier, VT_RECIPIENT) &&
           verifier.VerifyString(recipient()) &&
           VerifyFieldRequired<SelfMessaging::Metadata>(verifier, VT_METADATA) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           VerifyField<uint32_t>(verifier, VT_PRIORITY) &&
           VerifyOffset(verifier, VT_MESSAGE_TYPE) &&
           verifier.VerifyVector(message_type()) &&
           VerifyOffset(verifier, VT_COLLAPSE_KEY) &&
           verifier.VerifyVector(collapse_key()) &&
           VerifyOffset(verifier, VT_NOTIFICATION_PAYLOAD) &&
           verifier.VerifyVector(notification_payload()) &&
           VerifyOffset(verifier, VT_AUTHORIZATION) &&
           verifier.VerifyVector(authorization()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Message::VT_ID, id);
  }
  void add_msgtype(SelfMessaging::MsgType msgtype) {
    fbb_.AddElement<int8_t>(Message::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_subtype(SelfMessaging::MsgSubType subtype) {
    fbb_.AddElement<uint16_t>(Message::VT_SUBTYPE, static_cast<uint16_t>(subtype), 0);
  }
  void add_sender(flatbuffers::Offset<flatbuffers::String> sender) {
    fbb_.AddOffset(Message::VT_SENDER, sender);
  }
  void add_recipient(flatbuffers::Offset<flatbuffers::String> recipient) {
    fbb_.AddOffset(Message::VT_RECIPIENT, recipient);
  }
  void add_metadata(const SelfMessaging::Metadata *metadata) {
    fbb_.AddStruct(Message::VT_METADATA, metadata);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(Message::VT_CIPHERTEXT, ciphertext);
  }
  void add_priority(uint32_t priority) {
    fbb_.AddElement<uint32_t>(Message::VT_PRIORITY, priority, 0);
  }
  void add_message_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_type) {
    fbb_.AddOffset(Message::VT_MESSAGE_TYPE, message_type);
  }
  void add_collapse_key(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> collapse_key) {
    fbb_.AddOffset(Message::VT_COLLAPSE_KEY, collapse_key);
  }
  void add_notification_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> notification_payload) {
    fbb_.AddOffset(Message::VT_NOTIFICATION_PAYLOAD, notification_payload);
  }
  void add_authorization(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> authorization) {
    fbb_.AddOffset(Message::VT_AUTHORIZATION, authorization);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    fbb_.Required(o, Message::VT_METADATA);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::MsgSubType subtype = SelfMessaging::MsgSubType_Unknown,
    flatbuffers::Offset<flatbuffers::String> sender = 0,
    flatbuffers::Offset<flatbuffers::String> recipient = 0,
    const SelfMessaging::Metadata *metadata = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0,
    uint32_t priority = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> collapse_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> notification_payload = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> authorization = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_authorization(authorization);
  builder_.add_notification_payload(notification_payload);
  builder_.add_collapse_key(collapse_key);
  builder_.add_message_type(message_type);
  builder_.add_priority(priority);
  builder_.add_ciphertext(ciphertext);
  builder_.add_metadata(metadata);
  builder_.add_recipient(recipient);
  builder_.add_sender(sender);
  builder_.add_id(id);
  builder_.add_subtype(subtype);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::MsgSubType subtype = SelfMessaging::MsgSubType_Unknown,
    const char *sender = nullptr,
    const char *recipient = nullptr,
    const SelfMessaging::Metadata *metadata = 0,
    const std::vector<uint8_t> *ciphertext = nullptr,
    uint32_t priority = 0,
    const std::vector<uint8_t> *message_type = nullptr,
    const std::vector<uint8_t> *collapse_key = nullptr,
    const std::vector<uint8_t> *notification_payload = nullptr,
    const std::vector<uint8_t> *authorization = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto sender__ = sender ? _fbb.CreateString(sender) : 0;
  auto recipient__ = recipient ? _fbb.CreateString(recipient) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  auto message_type__ = message_type ? _fbb.CreateVector<uint8_t>(*message_type) : 0;
  auto collapse_key__ = collapse_key ? _fbb.CreateVector<uint8_t>(*collapse_key) : 0;
  auto notification_payload__ = notification_payload ? _fbb.CreateVector<uint8_t>(*notification_payload) : 0;
  auto authorization__ = authorization ? _fbb.CreateVector<uint8_t>(*authorization) : 0;
  return SelfMessaging::CreateMessage(
      _fbb,
      id__,
      msgtype,
      subtype,
      sender__,
      recipient__,
      metadata,
      ciphertext__,
      priority,
      message_type__,
      collapse_key__,
      notification_payload__,
      authorization__);
}

inline const SelfMessaging::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<SelfMessaging::Message>(buf);
}

inline const SelfMessaging::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SelfMessaging::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SelfMessaging::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SelfMessaging::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SelfMessaging

#endif  // FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_
#define FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace SelfMessaging {

struct Metadata;

struct Message;
struct MessageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Metadata FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t timestamp_;
  int64_t offset_;

 public:
  Metadata()
      : timestamp_(0),
        offset_(0) {
  }
  Metadata(int64_t _timestamp, int64_t _offset)
      : timestamp_(flatbuffers::EndianScalar(_timestamp)),
        offset_(flatbuffers::EndianScalar(_offset)) {
  }
  int64_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
  void mutate_timestamp(int64_t _timestamp) {
    flatbuffers::WriteScalar(&timestamp_, _timestamp);
  }
  int64_t offset() const {
    return flatbuffers::EndianScalar(offset_);
  }
  void mutate_offset(int64_t _offset) {
    flatbuffers::WriteScalar(&offset_, _offset);
  }
};
FLATBUFFERS_STRUCT_END(Metadata, 16);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MSGTYPE = 6,
    VT_SUBTYPE = 8,
    VT_SENDER = 10,
    VT_RECIPIENT = 12,
    VT_METADATA = 14,
    VT_CIPHERTEXT = 16
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  flatbuffers::String *mutable_id() {
    return GetPointer<flatbuffers::String *>(VT_ID);
  }
  SelfMessaging::MsgType msgtype() const {
    return static_cast<SelfMessaging::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  bool mutate_msgtype(SelfMessaging::MsgType _msgtype) {
    return SetField<int8_t>(VT_MSGTYPE, static_cast<int8_t>(_msgtype), 0);
  }
  SelfMessaging::MsgSubType subtype() const {
    return static_cast<SelfMessaging::MsgSubType>(GetField<uint16_t>(VT_SUBTYPE, 0));
  }
  bool mutate_subtype(SelfMessaging::MsgSubType _subtype) {
    return SetField<uint16_t>(VT_SUBTYPE, static_cast<uint16_t>(_subtype), 0);
  }
  const flatbuffers::String *sender() const {
    return GetPointer<const flatbuffers::String *>(VT_SENDER);
  }
  flatbuffers::String *mutable_sender() {
    return GetPointer<flatbuffers::String *>(VT_SENDER);
  }
  const flatbuffers::String *recipient() const {
    return GetPointer<const flatbuffers::String *>(VT_RECIPIENT);
  }
  flatbuffers::String *mutable_recipient() {
    return GetPointer<flatbuffers::String *>(VT_RECIPIENT);
  }
  const SelfMessaging::Metadata *metadata() const {
    return GetStruct<const SelfMessaging::Metadata *>(VT_METADATA);
  }
  SelfMessaging::Metadata *mutable_metadata() {
    return GetStruct<SelfMessaging::Metadata *>(VT_METADATA);
  }
  const flatbuffers::Vector<uint8_t> *ciphertext() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  flatbuffers::Vector<uint8_t> *mutable_ciphertext() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_CIPHERTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE) &&
           VerifyField<uint16_t>(verifier, VT_SUBTYPE) &&
           VerifyOffset(verifier, VT_SENDER) &&
           verifier.VerifyString(sender()) &&
           VerifyOffset(verifier, VT_RECIPIENT) &&
           verifier.VerifyString(recipient()) &&
           VerifyFieldRequired<SelfMessaging::Metadata>(verifier, VT_METADATA) &&
           VerifyOffset(verifier, VT_CIPHERTEXT) &&
           verifier.VerifyVector(ciphertext()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Message::VT_ID, id);
  }
  void add_msgtype(SelfMessaging::MsgType msgtype) {
    fbb_.AddElement<int8_t>(Message::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_subtype(SelfMessaging::MsgSubType subtype) {
    fbb_.AddElement<uint16_t>(Message::VT_SUBTYPE, static_cast<uint16_t>(subtype), 0);
  }
  void add_sender(flatbuffers::Offset<flatbuffers::String> sender) {
    fbb_.AddOffset(Message::VT_SENDER, sender);
  }
  void add_recipient(flatbuffers::Offset<flatbuffers::String> recipient) {
    fbb_.AddOffset(Message::VT_RECIPIENT, recipient);
  }
  void add_metadata(const SelfMessaging::Metadata *metadata) {
    fbb_.AddStruct(Message::VT_METADATA, metadata);
  }
  void add_ciphertext(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext) {
    fbb_.AddOffset(Message::VT_CIPHERTEXT, ciphertext);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    fbb_.Required(o, Message::VT_METADATA);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::MsgSubType subtype = SelfMessaging::MsgSubType_Unknown,
    flatbuffers::Offset<flatbuffers::String> sender = 0,
    flatbuffers::Offset<flatbuffers::String> recipient = 0,
    const SelfMessaging::Metadata *metadata = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ciphertext = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_ciphertext(ciphertext);
  builder_.add_metadata(metadata);
  builder_.add_recipient(recipient);
  builder_.add_sender(sender);
  builder_.add_id(id);
  builder_.add_subtype(subtype);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::MsgSubType subtype = SelfMessaging::MsgSubType_Unknown,
    const char *sender = nullptr,
    const char *recipient = nullptr,
    const SelfMessaging::Metadata *metadata = 0,
    const std::vector<uint8_t> *ciphertext = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto sender__ = sender ? _fbb.CreateString(sender) : 0;
  auto recipient__ = recipient ? _fbb.CreateString(recipient) : 0;
  auto ciphertext__ = ciphertext ? _fbb.CreateVector<uint8_t>(*ciphertext) : 0;
  return SelfMessaging::CreateMessage(
      _fbb,
      id__,
      msgtype,
      subtype,
      sender__,
      recipient__,
      metadata,
      ciphertext__);
}

inline const SelfMessaging::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<SelfMessaging::Message>(buf);
}

inline const SelfMessaging::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SelfMessaging::Message>(buf);
}

inline Message *GetMutableMessage(void *buf) {
  return flatbuffers::GetMutableRoot<Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SelfMessaging::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SelfMessaging::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SelfMessaging

#endif  // FLATBUFFERS_GENERATED_MESSAGE_SELFMESSAGING_H_

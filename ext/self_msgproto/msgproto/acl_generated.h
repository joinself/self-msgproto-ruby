// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACL_SELFMESSAGING_H_
#define FLATBUFFERS_GENERATED_ACL_SELFMESSAGING_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace SelfMessaging {

struct ACL;
struct ACLBuilder;

struct ACL FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ACLBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MSGTYPE = 6,
    VT_COMMAND = 8,
    VT_PAYLOAD = 10
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  SelfMessaging::MsgType msgtype() const {
    return static_cast<SelfMessaging::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  SelfMessaging::ACLCommand command() const {
    return static_cast<SelfMessaging::ACLCommand>(GetField<int8_t>(VT_COMMAND, 0));
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE) &&
           VerifyField<int8_t>(verifier, VT_COMMAND) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct ACLBuilder {
  typedef ACL Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(ACL::VT_ID, id);
  }
  void add_msgtype(SelfMessaging::MsgType msgtype) {
    fbb_.AddElement<int8_t>(ACL::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_command(SelfMessaging::ACLCommand command) {
    fbb_.AddElement<int8_t>(ACL::VT_COMMAND, static_cast<int8_t>(command), 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(ACL::VT_PAYLOAD, payload);
  }
  explicit ACLBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ACL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ACL>(end);
    return o;
  }
};

inline flatbuffers::Offset<ACL> CreateACL(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::ACLCommand command = SelfMessaging::ACLCommand_LIST,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  ACLBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_id(id);
  builder_.add_command(command);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<ACL> CreateACLDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    SelfMessaging::ACLCommand command = SelfMessaging::ACLCommand_LIST,
    const std::vector<uint8_t> *payload = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return SelfMessaging::CreateACL(
      _fbb,
      id__,
      msgtype,
      command,
      payload__);
}

inline const SelfMessaging::ACL *GetACL(const void *buf) {
  return flatbuffers::GetRoot<SelfMessaging::ACL>(buf);
}

inline const SelfMessaging::ACL *GetSizePrefixedACL(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SelfMessaging::ACL>(buf);
}

inline bool VerifyACLBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SelfMessaging::ACL>(nullptr);
}

inline bool VerifySizePrefixedACLBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SelfMessaging::ACL>(nullptr);
}

inline void FinishACLBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::ACL> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedACLBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::ACL> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SelfMessaging

#endif  // FLATBUFFERS_GENERATED_ACL_SELFMESSAGING_H_

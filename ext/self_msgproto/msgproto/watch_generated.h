// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCH_SELFMESSAGING_H_
#define FLATBUFFERS_GENERATED_WATCH_SELFMESSAGING_H_

#include "flatbuffers/flatbuffers.h"

#include "types_generated.h"

namespace SelfMessaging {

struct Watch;
struct WatchBuilder;

struct Watch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_MSGTYPE = 6,
    VT_RECIPIENT = 8,
    VT_WATCH = 10
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  SelfMessaging::MsgType msgtype() const {
    return static_cast<SelfMessaging::MsgType>(GetField<int8_t>(VT_MSGTYPE, 0));
  }
  const flatbuffers::String *recipient() const {
    return GetPointer<const flatbuffers::String *>(VT_RECIPIENT);
  }
  bool watch() const {
    return GetField<uint8_t>(VT_WATCH, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_MSGTYPE) &&
           VerifyOffset(verifier, VT_RECIPIENT) &&
           verifier.VerifyString(recipient()) &&
           VerifyField<uint8_t>(verifier, VT_WATCH) &&
           verifier.EndTable();
  }
};

struct WatchBuilder {
  typedef Watch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Watch::VT_ID, id);
  }
  void add_msgtype(SelfMessaging::MsgType msgtype) {
    fbb_.AddElement<int8_t>(Watch::VT_MSGTYPE, static_cast<int8_t>(msgtype), 0);
  }
  void add_recipient(flatbuffers::Offset<flatbuffers::String> recipient) {
    fbb_.AddOffset(Watch::VT_RECIPIENT, recipient);
  }
  void add_watch(bool watch) {
    fbb_.AddElement<uint8_t>(Watch::VT_WATCH, static_cast<uint8_t>(watch), 0);
  }
  explicit WatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Watch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Watch>(end);
    return o;
  }
};

inline flatbuffers::Offset<Watch> CreateWatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    flatbuffers::Offset<flatbuffers::String> recipient = 0,
    bool watch = false) {
  WatchBuilder builder_(_fbb);
  builder_.add_recipient(recipient);
  builder_.add_id(id);
  builder_.add_watch(watch);
  builder_.add_msgtype(msgtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<Watch> CreateWatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SelfMessaging::MsgType msgtype = SelfMessaging::MsgType_MSG,
    const char *recipient = nullptr,
    bool watch = false) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto recipient__ = recipient ? _fbb.CreateString(recipient) : 0;
  return SelfMessaging::CreateWatch(
      _fbb,
      id__,
      msgtype,
      recipient__,
      watch);
}

inline const SelfMessaging::Watch *GetWatch(const void *buf) {
  return flatbuffers::GetRoot<SelfMessaging::Watch>(buf);
}

inline const SelfMessaging::Watch *GetSizePrefixedWatch(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SelfMessaging::Watch>(buf);
}

inline bool VerifyWatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SelfMessaging::Watch>(nullptr);
}

inline bool VerifySizePrefixedWatchBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SelfMessaging::Watch>(nullptr);
}

inline void FinishWatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Watch> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWatchBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SelfMessaging::Watch> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SelfMessaging

#endif  // FLATBUFFERS_GENERATED_WATCH_SELFMESSAGING_H_
